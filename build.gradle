import com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat

plugins {
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.openapi.generator" version "7.1.0"
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

sourceSets.main.java.srcDirs = ['build/generated/src/main/java','src/main/java']

task verifyFormatting(type: VerifyGoogleJavaFormat) {
    exclude 'build/generated'
    ignoreFailures true
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.22'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.github.spotbugs:spotbugs-annotations:4.8.6'
    implementation 'com.google.guava:guava:33.2.1-jre'
    implementation 'org.springframework.retry:spring-retry:1.3.4'
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.apache.logging.log4j:log4j-layout-template-json'
    implementation 'javax.inject:javax.inject:1'
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

openApiGenerate {
    generatorName.set("spring")
    inputSpec.set("$rootDir/api-spec/rq-challenge.yml")
    outputDir.set("$buildDir/generated")
    apiPackage.set("com.example.rqchallenge.controller")
    invokerPackage.set("com.example.rqchallenge")
    modelPackage.set("com.example.rqchallenge.model")
    generateApiTests.set(false)
    generateModelTests.set(false)

    additionalProperties.set([
            delegatePattern: "true"
    ])

    skipOperationExample.set(true)
    globalProperties.set([
            apis: "",
            models: "",
    ])
}

task generateEmployeesApisClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName.set("java")
    library.set("resttemplate")
    inputSpec.set("$rootDir/api-spec/dependencies/employees.yml")
    outputDir.set("$buildDir/generated")
    apiPackage.set("com.example.rqchallenge.client")
    modelPackage.set("com.example.rqchallenge.model")
    generateApiTests.set(false)
    generateModelTests.set(false)
    skipOperationExample.set(true)
}

tasks.compileJava {
    dependsOn(tasks.openApiGenerate)
    dependsOn(tasks.generateEmployeesApisClient)
}
